/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.sso.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SessionResponse extends ThriftStructCodec3[SessionResponse] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("SessionResponse")
  val CodeField = new TField("code", TType.STRING, 1)
  val CodeFieldManifest = implicitly[Manifest[String]]
  val ClientIdField = new TField("clientId", TType.I32, 2)
  val ClientIdFieldManifest = implicitly[Manifest[Int]]
  val VersionField = new TField("version", TType.STRING, 3)
  val VersionFieldManifest = implicitly[Manifest[String]]
  val IpField = new TField("ip", TType.I64, 4)
  val IpFieldManifest = implicitly[Manifest[Long]]
  val DeviceTypeField = new TField("deviceType", TType.I32, 5)
  val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
  val FingerPrintField = new TField("fingerPrint", TType.STRING, 6)
  val FingerPrintFieldManifest = implicitly[Manifest[String]]
  val TokenField = new TField("token", TType.STRING, 7)
  val TokenFieldManifest = implicitly[Manifest[String]]
  val StatusField = new TField("status", TType.I32, 8)
  val StatusFieldManifest = implicitly[Manifest[Int]]
  val MemberIdField = new TField("memberId", TType.I64, 9)
  val MemberIdFieldManifest = implicitly[Manifest[Long]]
  val IdentityField = new TField("identity", TType.STRING, 10)
  val IdentityFieldManifest = implicitly[Manifest[String]]
  val IdentityTicketField = new TField("identityTicket", TType.STRING, 11)
  val IdentityTicketFieldManifest = implicitly[Manifest[String]]
  val GmtCreateField = new TField("gmtCreate", TType.I64, 12)
  val GmtCreateFieldManifest = implicitly[Manifest[Long]]
  val LastAccessTimeField = new TField("lastAccessTime", TType.I64, 13)
  val LastAccessTimeFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      CodeField,
      false,
      false,
      CodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      ClientIdField,
      false,
      false,
      ClientIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      VersionField,
      false,
      false,
      VersionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      IpField,
      false,
      false,
      IpFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DeviceTypeField,
      false,
      false,
      DeviceTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      FingerPrintField,
      false,
      false,
      FingerPrintFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      TokenField,
      false,
      false,
      TokenFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      StatusField,
      false,
      false,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberIdField,
      false,
      false,
      MemberIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      IdentityField,
      false,
      false,
      IdentityFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      IdentityTicketField,
      false,
      false,
      IdentityTicketFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      GmtCreateField,
      false,
      false,
      GmtCreateFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      LastAccessTimeField,
      false,
      false,
      LastAccessTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SessionResponse): Unit = {
  }

  def withoutPassthroughFields(original: SessionResponse): SessionResponse =
    new Immutable(
      code =
        {
          val field = original.code
          field
        },
      clientId =
        {
          val field = original.clientId
          field
        },
      version =
        {
          val field = original.version
          field
        },
      ip =
        {
          val field = original.ip
          field
        },
      deviceType =
        {
          val field = original.deviceType
          field
        },
      fingerPrint =
        {
          val field = original.fingerPrint
          field
        },
      token =
        {
          val field = original.token
          field
        },
      status =
        {
          val field = original.status
          field
        },
      memberId =
        {
          val field = original.memberId
          field
        },
      identity =
        {
          val field = original.identity
          field
        },
      identityTicket =
        {
          val field = original.identityTicket
          field
        },
      gmtCreate =
        {
          val field = original.gmtCreate
          field
        },
      lastAccessTime =
        {
          val field = original.lastAccessTime
          field
        }
    )

  override def encode(_item: SessionResponse, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): SessionResponse = {

    var codeOffset: Int = -1
    var clientId: Int = 0
    var versionOffset: Int = -1
    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrintOffset: Int = -1
    var tokenOffset: Int = -1
    var status: Int = 0
    var memberId: Long = 0L
    var identityOffset: Int = -1
    var identityTicketOffset: Int = -1
    var gmtCreate: Long = 0L
    var lastAccessTime: Long = 0L

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                codeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
    
                clientId = readClientIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'clientId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                versionOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'version' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
    
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
    
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrintOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                tokenOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'token' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
    
                status = readStatusValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                identityOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'identity' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                identityTicketOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'identityTicket' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.I64 =>
    
                gmtCreate = readGmtCreateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtCreate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.I64 =>
    
                lastAccessTime = readLastAccessTimeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'lastAccessTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      codeOffset,
      clientId,
      versionOffset,
      ip,
      deviceType,
      fingerPrintOffset,
      tokenOffset,
      status,
      memberId,
      identityOffset,
      identityTicketOffset,
      gmtCreate,
      lastAccessTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): SessionResponse =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): SessionResponse = {
    var code: String = ""
    var clientId: Int = 0
    var version: String = ""
    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrint: String = ""
    var token: String = ""
    var status: Int = 0
    var memberId: Long = 0L
    var identity: String = ""
    var identityTicket: String = ""
    var gmtCreate: Long = 0L
    var lastAccessTime: Long = 0L
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                code = readCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                clientId = readClientIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'clientId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                version = readVersionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'version' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrint = readFingerPrintValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                token = readTokenValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'token' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
                status = readStatusValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                identity = readIdentityValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'identity' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                identityTicket = readIdentityTicketValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'identityTicket' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.I64 =>
                gmtCreate = readGmtCreateValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'gmtCreate' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.I64 =>
                lastAccessTime = readLastAccessTimeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'lastAccessTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    code: String = "",
    clientId: Int = 0,
    version: String = "",
    ip: Long = 0L,
    deviceType: Int = 0,
    fingerPrint: String = "",
    token: String = "",
    status: Int = 0,
    memberId: Long = 0L,
    identity: String = "",
    identityTicket: String = "",
    gmtCreate: Long = 0L,
    lastAccessTime: Long = 0L
  ): SessionResponse =
    new Immutable(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime
    )

  def unapply(_item: SessionResponse): _root_.scala.Option[scala.Product13[String, Int, String, Long, Int, String, String, Int, Long, String, String, Long, Long]] = _root_.scala.Some(_item)


  @inline private def readCodeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCodeField(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCodeValue(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(code_item)
  }

  @inline private def readClientIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeClientIdField(clientId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ClientIdField)
    writeClientIdValue(clientId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeClientIdValue(clientId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(clientId_item)
  }

  @inline private def readVersionValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeVersionField(version_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(VersionField)
    writeVersionValue(version_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeVersionValue(version_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(version_item)
  }

  @inline private def readIpValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeIpField(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IpField)
    writeIpValue(ip_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIpValue(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(ip_item)
  }

  @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DeviceTypeField)
    writeDeviceTypeValue(deviceType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(deviceType_item)
  }

  @inline private def readFingerPrintValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFingerPrintField(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FingerPrintField)
    writeFingerPrintValue(fingerPrint_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFingerPrintValue(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(fingerPrint_item)
  }

  @inline private def readTokenValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTokenField(token_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TokenField)
    writeTokenValue(token_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTokenValue(token_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(token_item)
  }

  @inline private def readStatusValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeStatusField(status_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusField)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(status_item)
  }

  @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberIdField)
    writeMemberIdValue(memberId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId_item)
  }

  @inline private def readIdentityValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeIdentityField(identity_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdentityField)
    writeIdentityValue(identity_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdentityValue(identity_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(identity_item)
  }

  @inline private def readIdentityTicketValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeIdentityTicketField(identityTicket_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdentityTicketField)
    writeIdentityTicketValue(identityTicket_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdentityTicketValue(identityTicket_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(identityTicket_item)
  }

  @inline private def readGmtCreateValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeGmtCreateField(gmtCreate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GmtCreateField)
    writeGmtCreateValue(gmtCreate_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGmtCreateValue(gmtCreate_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(gmtCreate_item)
  }

  @inline private def readLastAccessTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeLastAccessTimeField(lastAccessTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LastAccessTimeField)
    writeLastAccessTimeValue(lastAccessTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLastAccessTimeValue(lastAccessTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(lastAccessTime_item)
  }


  object Immutable extends ThriftStructCodec3[SessionResponse] {
    override def encode(_item: SessionResponse, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SessionResponse = SessionResponse.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[SessionResponse] = SessionResponse.metaData
  }

  /**
   * The default read-only implementation of SessionResponse.  You typically should not need to
   * directly reference this class; instead, use the SessionResponse.apply method to construct
   * new instances.
   */
  class Immutable(
      val code: String,
      val clientId: Int,
      val version: String,
      val ip: Long,
      val deviceType: Int,
      val fingerPrint: String,
      val token: String,
      val status: Int,
      val memberId: Long,
      val identity: String,
      val identityTicket: String,
      val gmtCreate: Long,
      val lastAccessTime: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SessionResponse {
    def this(
      code: String = "",
      clientId: Int = 0,
      version: String = "",
      ip: Long = 0L,
      deviceType: Int = 0,
      fingerPrint: String = "",
      token: String = "",
      status: Int = 0,
      memberId: Long = 0L,
      identity: String = "",
      identityTicket: String = "",
      gmtCreate: Long = 0L,
      lastAccessTime: Long = 0L
    ) = this(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      codeOffset: Int,
      val clientId: Int,
      versionOffset: Int,
      val ip: Long,
      val deviceType: Int,
      fingerPrintOffset: Int,
      tokenOffset: Int,
      val status: Int,
      val memberId: Long,
      identityOffset: Int,
      identityTicketOffset: Int,
      val gmtCreate: Long,
      val lastAccessTime: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SessionResponse {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val code: String =
      if (codeOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, codeOffset)
      }
    lazy val version: String =
      if (versionOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, versionOffset)
      }
    lazy val fingerPrint: String =
      if (fingerPrintOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, fingerPrintOffset)
      }
    lazy val token: String =
      if (tokenOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, tokenOffset)
      }
    lazy val identity: String =
      if (identityOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, identityOffset)
      }
    lazy val identityTicket: String =
      if (identityTicketOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, identityTicketOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the SessionResponse trait with additional state or
   * behavior and implement the read-only methods from SessionResponse using an underlying
   * instance.
   */
  trait Proxy extends SessionResponse {
    protected def _underlying_SessionResponse: SessionResponse
    override def code: String = _underlying_SessionResponse.code
    override def clientId: Int = _underlying_SessionResponse.clientId
    override def version: String = _underlying_SessionResponse.version
    override def ip: Long = _underlying_SessionResponse.ip
    override def deviceType: Int = _underlying_SessionResponse.deviceType
    override def fingerPrint: String = _underlying_SessionResponse.fingerPrint
    override def token: String = _underlying_SessionResponse.token
    override def status: Int = _underlying_SessionResponse.status
    override def memberId: Long = _underlying_SessionResponse.memberId
    override def identity: String = _underlying_SessionResponse.identity
    override def identityTicket: String = _underlying_SessionResponse.identityTicket
    override def gmtCreate: Long = _underlying_SessionResponse.gmtCreate
    override def lastAccessTime: Long = _underlying_SessionResponse.lastAccessTime
    override def _passthroughFields = _underlying_SessionResponse._passthroughFields
  }
}

trait SessionResponse
  extends ThriftStruct
  with scala.Product13[String, Int, String, Long, Int, String, String, Int, Long, String, String, Long, Long]
  with java.io.Serializable
{
  import SessionResponse._

  def code: String
  def clientId: Int
  def version: String
  def ip: Long
  def deviceType: Int
  def fingerPrint: String
  def token: String
  def status: Int
  def memberId: Long
  def identity: String
  def identityTicket: String
  def gmtCreate: Long
  def lastAccessTime: Long

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = code
  def _2 = clientId
  def _3 = version
  def _4 = ip
  def _5 = deviceType
  def _6 = fingerPrint
  def _7 = token
  def _8 = status
  def _9 = memberId
  def _10 = identity
  def _11 = identityTicket
  def _12 = gmtCreate
  def _13 = lastAccessTime


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (code ne null) {
                writeCodeValue(code, _oprot)
                _root_.scala.Some(SessionResponse.CodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeClientIdValue(clientId, _oprot)
                _root_.scala.Some(SessionResponse.ClientIdField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (version ne null) {
                writeVersionValue(version, _oprot)
                _root_.scala.Some(SessionResponse.VersionField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeIpValue(ip, _oprot)
                _root_.scala.Some(SessionResponse.IpField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeDeviceTypeValue(deviceType, _oprot)
                _root_.scala.Some(SessionResponse.DeviceTypeField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (fingerPrint ne null) {
                writeFingerPrintValue(fingerPrint, _oprot)
                _root_.scala.Some(SessionResponse.FingerPrintField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (token ne null) {
                writeTokenValue(token, _oprot)
                _root_.scala.Some(SessionResponse.TokenField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (true) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(SessionResponse.StatusField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (true) {
                writeMemberIdValue(memberId, _oprot)
                _root_.scala.Some(SessionResponse.MemberIdField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (identity ne null) {
                writeIdentityValue(identity, _oprot)
                _root_.scala.Some(SessionResponse.IdentityField)
              } else {
                _root_.scala.None
              }
            case 11 =>
              if (identityTicket ne null) {
                writeIdentityTicketValue(identityTicket, _oprot)
                _root_.scala.Some(SessionResponse.IdentityTicketField)
              } else {
                _root_.scala.None
              }
            case 12 =>
              if (true) {
                writeGmtCreateValue(gmtCreate, _oprot)
                _root_.scala.Some(SessionResponse.GmtCreateField)
              } else {
                _root_.scala.None
              }
            case 13 =>
              if (true) {
                writeLastAccessTimeValue(lastAccessTime, _oprot)
                _root_.scala.Some(SessionResponse.LastAccessTimeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SessionResponse = {
    var code: String = this.code
    var clientId: Int = this.clientId
    var version: String = this.version
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var token: String = this.token
    var status: Int = this.status
    var memberId: Long = this.memberId
    var identity: String = this.identity
    var identityTicket: String = this.identityTicket
    var gmtCreate: Long = this.gmtCreate
    var lastAccessTime: Long = this.lastAccessTime
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        code = readCodeValue(_blob.read)
      case 2 =>
        clientId = readClientIdValue(_blob.read)
      case 3 =>
        version = readVersionValue(_blob.read)
      case 4 =>
        ip = readIpValue(_blob.read)
      case 5 =>
        deviceType = readDeviceTypeValue(_blob.read)
      case 6 =>
        fingerPrint = readFingerPrintValue(_blob.read)
      case 7 =>
        token = readTokenValue(_blob.read)
      case 8 =>
        status = readStatusValue(_blob.read)
      case 9 =>
        memberId = readMemberIdValue(_blob.read)
      case 10 =>
        identity = readIdentityValue(_blob.read)
      case 11 =>
        identityTicket = readIdentityTicketValue(_blob.read)
      case 12 =>
        gmtCreate = readGmtCreateValue(_blob.read)
      case 13 =>
        lastAccessTime = readLastAccessTimeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SessionResponse = {
    var code: String = this.code
    var clientId: Int = this.clientId
    var version: String = this.version
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var token: String = this.token
    var status: Int = this.status
    var memberId: Long = this.memberId
    var identity: String = this.identity
    var identityTicket: String = this.identityTicket
    var gmtCreate: Long = this.gmtCreate
    var lastAccessTime: Long = this.lastAccessTime

    _fieldId match {
      case 1 =>
        code = ""
      case 2 =>
        clientId = 0
      case 3 =>
        version = ""
      case 4 =>
        ip = 0L
      case 5 =>
        deviceType = 0
      case 6 =>
        fingerPrint = ""
      case 7 =>
        token = ""
      case 8 =>
        status = 0
      case 9 =>
        memberId = 0L
      case 10 =>
        identity = ""
      case 11 =>
        identityTicket = ""
      case 12 =>
        gmtCreate = 0L
      case 13 =>
        lastAccessTime = 0L
      case _ =>
    }
    new Immutable(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetCode: SessionResponse = unsetField(1)

  def unsetClientId: SessionResponse = unsetField(2)

  def unsetVersion: SessionResponse = unsetField(3)

  def unsetIp: SessionResponse = unsetField(4)

  def unsetDeviceType: SessionResponse = unsetField(5)

  def unsetFingerPrint: SessionResponse = unsetField(6)

  def unsetToken: SessionResponse = unsetField(7)

  def unsetStatus: SessionResponse = unsetField(8)

  def unsetMemberId: SessionResponse = unsetField(9)

  def unsetIdentity: SessionResponse = unsetField(10)

  def unsetIdentityTicket: SessionResponse = unsetField(11)

  def unsetGmtCreate: SessionResponse = unsetField(12)

  def unsetLastAccessTime: SessionResponse = unsetField(13)


  override def write(_oprot: TProtocol): Unit = {
    SessionResponse.validate(this)
    _oprot.writeStructBegin(Struct)
    if (code ne null) writeCodeField(code, _oprot)
    writeClientIdField(clientId, _oprot)
    if (version ne null) writeVersionField(version, _oprot)
    writeIpField(ip, _oprot)
    writeDeviceTypeField(deviceType, _oprot)
    if (fingerPrint ne null) writeFingerPrintField(fingerPrint, _oprot)
    if (token ne null) writeTokenField(token, _oprot)
    writeStatusField(status, _oprot)
    writeMemberIdField(memberId, _oprot)
    if (identity ne null) writeIdentityField(identity, _oprot)
    if (identityTicket ne null) writeIdentityTicketField(identityTicket, _oprot)
    writeGmtCreateField(gmtCreate, _oprot)
    writeLastAccessTimeField(lastAccessTime, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    code: String = this.code,
    clientId: Int = this.clientId,
    version: String = this.version,
    ip: Long = this.ip,
    deviceType: Int = this.deviceType,
    fingerPrint: String = this.fingerPrint,
    token: String = this.token,
    status: Int = this.status,
    memberId: Long = this.memberId,
    identity: String = this.identity,
    identityTicket: String = this.identityTicket,
    gmtCreate: Long = this.gmtCreate,
    lastAccessTime: Long = this.lastAccessTime,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SessionResponse =
    new Immutable(
      code,
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      token,
      status,
      memberId,
      identity,
      identityTicket,
      gmtCreate,
      lastAccessTime,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SessionResponse]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[SessionResponse]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 13

  override def productElement(n: Int): Any = n match {
    case 0 => this.code
    case 1 => this.clientId
    case 2 => this.version
    case 3 => this.ip
    case 4 => this.deviceType
    case 5 => this.fingerPrint
    case 6 => this.token
    case 7 => this.status
    case 8 => this.memberId
    case 9 => this.identity
    case 10 => this.identityTicket
    case 11 => this.gmtCreate
    case 12 => this.lastAccessTime
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SessionResponse"
}