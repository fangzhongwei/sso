/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.sso.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object CreateSessionRequest extends ThriftStructCodec3[CreateSessionRequest] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("CreateSessionRequest")
  val ClientIdField = new TField("clientId", TType.I32, 1)
  val ClientIdFieldManifest = implicitly[Manifest[Int]]
  val VersionField = new TField("version", TType.STRING, 2)
  val VersionFieldManifest = implicitly[Manifest[String]]
  val IpField = new TField("ip", TType.I64, 3)
  val IpFieldManifest = implicitly[Manifest[Long]]
  val DeviceTypeField = new TField("deviceType", TType.I32, 4)
  val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
  val FingerPrintField = new TField("fingerPrint", TType.STRING, 5)
  val FingerPrintFieldManifest = implicitly[Manifest[String]]
  val MemberIdField = new TField("memberId", TType.I64, 6)
  val MemberIdFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ClientIdField,
      false,
      false,
      ClientIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      VersionField,
      false,
      false,
      VersionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      IpField,
      false,
      false,
      IpFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DeviceTypeField,
      false,
      false,
      DeviceTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      FingerPrintField,
      false,
      false,
      FingerPrintFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberIdField,
      false,
      false,
      MemberIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: CreateSessionRequest): Unit = {
  }

  def withoutPassthroughFields(original: CreateSessionRequest): CreateSessionRequest =
    new Immutable(
      clientId =
        {
          val field = original.clientId
          field
        },
      version =
        {
          val field = original.version
          field
        },
      ip =
        {
          val field = original.ip
          field
        },
      deviceType =
        {
          val field = original.deviceType
          field
        },
      fingerPrint =
        {
          val field = original.fingerPrint
          field
        },
      memberId =
        {
          val field = original.memberId
          field
        }
    )

  override def encode(_item: CreateSessionRequest, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): CreateSessionRequest = {

    var clientId: Int = 0
    var versionOffset: Int = -1
    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrintOffset: Int = -1
    var memberId: Long = 0L

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                clientId = readClientIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'clientId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                versionOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'version' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
    
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrintOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      clientId,
      versionOffset,
      ip,
      deviceType,
      fingerPrintOffset,
      memberId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): CreateSessionRequest =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): CreateSessionRequest = {
    var clientId: Int = 0
    var version: String = ""
    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrint: String = ""
    var memberId: Long = 0L
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                clientId = readClientIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'clientId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                version = readVersionValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'version' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrint = readFingerPrintValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I64 =>
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    clientId: Int = 0,
    version: String = "",
    ip: Long = 0L,
    deviceType: Int = 0,
    fingerPrint: String = "",
    memberId: Long = 0L
  ): CreateSessionRequest =
    new Immutable(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId
    )

  def unapply(_item: CreateSessionRequest): _root_.scala.Option[scala.Product6[Int, String, Long, Int, String, Long]] = _root_.scala.Some(_item)


  @inline private def readClientIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeClientIdField(clientId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ClientIdField)
    writeClientIdValue(clientId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeClientIdValue(clientId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(clientId_item)
  }

  @inline private def readVersionValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeVersionField(version_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(VersionField)
    writeVersionValue(version_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeVersionValue(version_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(version_item)
  }

  @inline private def readIpValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeIpField(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IpField)
    writeIpValue(ip_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIpValue(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(ip_item)
  }

  @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DeviceTypeField)
    writeDeviceTypeValue(deviceType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(deviceType_item)
  }

  @inline private def readFingerPrintValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFingerPrintField(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FingerPrintField)
    writeFingerPrintValue(fingerPrint_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFingerPrintValue(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(fingerPrint_item)
  }

  @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberIdField)
    writeMemberIdValue(memberId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId_item)
  }


  object Immutable extends ThriftStructCodec3[CreateSessionRequest] {
    override def encode(_item: CreateSessionRequest, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): CreateSessionRequest = CreateSessionRequest.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[CreateSessionRequest] = CreateSessionRequest.metaData
  }

  /**
   * The default read-only implementation of CreateSessionRequest.  You typically should not need to
   * directly reference this class; instead, use the CreateSessionRequest.apply method to construct
   * new instances.
   */
  class Immutable(
      val clientId: Int,
      val version: String,
      val ip: Long,
      val deviceType: Int,
      val fingerPrint: String,
      val memberId: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CreateSessionRequest {
    def this(
      clientId: Int = 0,
      version: String = "",
      ip: Long = 0L,
      deviceType: Int = 0,
      fingerPrint: String = "",
      memberId: Long = 0L
    ) = this(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val clientId: Int,
      versionOffset: Int,
      val ip: Long,
      val deviceType: Int,
      fingerPrintOffset: Int,
      val memberId: Long,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends CreateSessionRequest {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val version: String =
      if (versionOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, versionOffset)
      }
    lazy val fingerPrint: String =
      if (fingerPrintOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, fingerPrintOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the CreateSessionRequest trait with additional state or
   * behavior and implement the read-only methods from CreateSessionRequest using an underlying
   * instance.
   */
  trait Proxy extends CreateSessionRequest {
    protected def _underlying_CreateSessionRequest: CreateSessionRequest
    override def clientId: Int = _underlying_CreateSessionRequest.clientId
    override def version: String = _underlying_CreateSessionRequest.version
    override def ip: Long = _underlying_CreateSessionRequest.ip
    override def deviceType: Int = _underlying_CreateSessionRequest.deviceType
    override def fingerPrint: String = _underlying_CreateSessionRequest.fingerPrint
    override def memberId: Long = _underlying_CreateSessionRequest.memberId
    override def _passthroughFields = _underlying_CreateSessionRequest._passthroughFields
  }
}

trait CreateSessionRequest
  extends ThriftStruct
  with scala.Product6[Int, String, Long, Int, String, Long]
  with java.io.Serializable
{
  import CreateSessionRequest._

  def clientId: Int
  def version: String
  def ip: Long
  def deviceType: Int
  def fingerPrint: String
  def memberId: Long

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = clientId
  def _2 = version
  def _3 = ip
  def _4 = deviceType
  def _5 = fingerPrint
  def _6 = memberId


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeClientIdValue(clientId, _oprot)
                _root_.scala.Some(CreateSessionRequest.ClientIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (version ne null) {
                writeVersionValue(version, _oprot)
                _root_.scala.Some(CreateSessionRequest.VersionField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeIpValue(ip, _oprot)
                _root_.scala.Some(CreateSessionRequest.IpField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeDeviceTypeValue(deviceType, _oprot)
                _root_.scala.Some(CreateSessionRequest.DeviceTypeField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (fingerPrint ne null) {
                writeFingerPrintValue(fingerPrint, _oprot)
                _root_.scala.Some(CreateSessionRequest.FingerPrintField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeMemberIdValue(memberId, _oprot)
                _root_.scala.Some(CreateSessionRequest.MemberIdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): CreateSessionRequest = {
    var clientId: Int = this.clientId
    var version: String = this.version
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var memberId: Long = this.memberId
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        clientId = readClientIdValue(_blob.read)
      case 2 =>
        version = readVersionValue(_blob.read)
      case 3 =>
        ip = readIpValue(_blob.read)
      case 4 =>
        deviceType = readDeviceTypeValue(_blob.read)
      case 5 =>
        fingerPrint = readFingerPrintValue(_blob.read)
      case 6 =>
        memberId = readMemberIdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): CreateSessionRequest = {
    var clientId: Int = this.clientId
    var version: String = this.version
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var memberId: Long = this.memberId

    _fieldId match {
      case 1 =>
        clientId = 0
      case 2 =>
        version = ""
      case 3 =>
        ip = 0L
      case 4 =>
        deviceType = 0
      case 5 =>
        fingerPrint = ""
      case 6 =>
        memberId = 0L
      case _ =>
    }
    new Immutable(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetClientId: CreateSessionRequest = unsetField(1)

  def unsetVersion: CreateSessionRequest = unsetField(2)

  def unsetIp: CreateSessionRequest = unsetField(3)

  def unsetDeviceType: CreateSessionRequest = unsetField(4)

  def unsetFingerPrint: CreateSessionRequest = unsetField(5)

  def unsetMemberId: CreateSessionRequest = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    CreateSessionRequest.validate(this)
    _oprot.writeStructBegin(Struct)
    writeClientIdField(clientId, _oprot)
    if (version ne null) writeVersionField(version, _oprot)
    writeIpField(ip, _oprot)
    writeDeviceTypeField(deviceType, _oprot)
    if (fingerPrint ne null) writeFingerPrintField(fingerPrint, _oprot)
    writeMemberIdField(memberId, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    clientId: Int = this.clientId,
    version: String = this.version,
    ip: Long = this.ip,
    deviceType: Int = this.deviceType,
    fingerPrint: String = this.fingerPrint,
    memberId: Long = this.memberId,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): CreateSessionRequest =
    new Immutable(
      clientId,
      version,
      ip,
      deviceType,
      fingerPrint,
      memberId,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[CreateSessionRequest]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[CreateSessionRequest]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.clientId
    case 1 => this.version
    case 2 => this.ip
    case 3 => this.deviceType
    case 4 => this.fingerPrint
    case 5 => this.memberId
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "CreateSessionRequest"
}