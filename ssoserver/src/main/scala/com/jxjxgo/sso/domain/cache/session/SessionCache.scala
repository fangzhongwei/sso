// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.jxjxgo.sso.domain.cache.session

@SerialVersionUID(0L)
final case class SessionCache(
                               token: String = "",
                               clientId: Int = 0,
                               version: String = "",
                               ip: Long = 0L,
                               deviceType: Int = 0,
                               fingerPrint: String = "",
                               status: Int = 0,
                               memberId: Long = 0L,
                               identity: String = "",
                               identityTicket: String = "",
                               gmtCreate: Long = 0L
                             ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[SessionCache] with com.trueaccord.lenses.Updatable[SessionCache] {
  @transient
  private[this] var __serializedSizeCachedValue: Int = 0

  private[this] def __computeSerializedValue(): Int = {
    var __size = 0
    if (token != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, token)
    }
    if (clientId != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, clientId)
    }
    if (version != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, version)
    }
    if (ip != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, ip)
    }
    if (deviceType != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, deviceType)
    }
    if (fingerPrint != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, fingerPrint)
    }
    if (status != 0) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, status)
    }
    if (memberId != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, memberId)
    }
    if (identity != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, identity)
    }
    if (identityTicket != "") {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, identityTicket)
    }
    if (gmtCreate != 0L) {
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, gmtCreate)
    }
    __size
  }

  final override def serializedSize: Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    {
      val __v = token
      if (__v != "") {
        _output__.writeString(1, __v)
      }
    };
    {
      val __v = clientId
      if (__v != 0) {
        _output__.writeInt32(2, __v)
      }
    };
    {
      val __v = version
      if (__v != "") {
        _output__.writeString(3, __v)
      }
    };
    {
      val __v = ip
      if (__v != 0L) {
        _output__.writeInt64(4, __v)
      }
    };
    {
      val __v = deviceType
      if (__v != 0) {
        _output__.writeInt32(5, __v)
      }
    };
    {
      val __v = fingerPrint
      if (__v != "") {
        _output__.writeString(6, __v)
      }
    };
    {
      val __v = status
      if (__v != 0) {
        _output__.writeInt32(7, __v)
      }
    };
    {
      val __v = memberId
      if (__v != 0L) {
        _output__.writeInt64(8, __v)
      }
    };
    {
      val __v = identity
      if (__v != "") {
        _output__.writeString(9, __v)
      }
    };
    {
      val __v = identityTicket
      if (__v != "") {
        _output__.writeString(10, __v)
      }
    };
    {
      val __v = gmtCreate
      if (__v != 0L) {
        _output__.writeInt64(11, __v)
      }
    };
  }

  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.jxjxgo.sso.domain.cache.session.SessionCache = {
    var __token = this.token
    var __clientId = this.clientId
    var __version = this.version
    var __ip = this.ip
    var __deviceType = this.deviceType
    var __fingerPrint = this.fingerPrint
    var __status = this.status
    var __memberId = this.memberId
    var __identity = this.identity
    var __identityTicket = this.identityTicket
    var __gmtCreate = this.gmtCreate
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __token = _input__.readString()
        case 16 =>
          __clientId = _input__.readInt32()
        case 26 =>
          __version = _input__.readString()
        case 32 =>
          __ip = _input__.readInt64()
        case 40 =>
          __deviceType = _input__.readInt32()
        case 50 =>
          __fingerPrint = _input__.readString()
        case 56 =>
          __status = _input__.readInt32()
        case 64 =>
          __memberId = _input__.readInt64()
        case 74 =>
          __identity = _input__.readString()
        case 82 =>
          __identityTicket = _input__.readString()
        case 88 =>
          __gmtCreate = _input__.readInt64()
        case tag => _input__.skipField(tag)
      }
    }
    com.jxjxgo.sso.domain.cache.session.SessionCache(
      token = __token,
      clientId = __clientId,
      version = __version,
      ip = __ip,
      deviceType = __deviceType,
      fingerPrint = __fingerPrint,
      status = __status,
      memberId = __memberId,
      identity = __identity,
      identityTicket = __identityTicket,
      gmtCreate = __gmtCreate
    )
  }

  def withToken(__v: String): SessionCache = copy(token = __v)

  def withClientId(__v: Int): SessionCache = copy(clientId = __v)

  def withVersion(__v: String): SessionCache = copy(version = __v)

  def withIp(__v: Long): SessionCache = copy(ip = __v)

  def withDeviceType(__v: Int): SessionCache = copy(deviceType = __v)

  def withFingerPrint(__v: String): SessionCache = copy(fingerPrint = __v)

  def withStatus(__v: Int): SessionCache = copy(status = __v)

  def withMemberId(__v: Long): SessionCache = copy(memberId = __v)

  def withIdentity(__v: String): SessionCache = copy(identity = __v)

  def withIdentityTicket(__v: String): SessionCache = copy(identityTicket = __v)

  def withGmtCreate(__v: Long): SessionCache = copy(gmtCreate = __v)

  def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
    __field.getNumber match {
      case 1 => {
        val __t = token
        if (__t != "") __t else null
      }
      case 2 => {
        val __t = clientId
        if (__t != 0) __t else null
      }
      case 3 => {
        val __t = version
        if (__t != "") __t else null
      }
      case 4 => {
        val __t = ip
        if (__t != 0L) __t else null
      }
      case 5 => {
        val __t = deviceType
        if (__t != 0) __t else null
      }
      case 6 => {
        val __t = fingerPrint
        if (__t != "") __t else null
      }
      case 7 => {
        val __t = status
        if (__t != 0) __t else null
      }
      case 8 => {
        val __t = memberId
        if (__t != 0L) __t else null
      }
      case 9 => {
        val __t = identity
        if (__t != "") __t else null
      }
      case 10 => {
        val __t = identityTicket
        if (__t != "") __t else null
      }
      case 11 => {
        val __t = gmtCreate
        if (__t != 0L) __t else null
      }
    }
  }

  override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)

  def companion = com.jxjxgo.sso.domain.cache.session.SessionCache
}

object SessionCache extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.sso.domain.cache.session.SessionCache] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.sso.domain.cache.session.SessionCache] = this

  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.jxjxgo.sso.domain.cache.session.SessionCache = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.jxjxgo.sso.domain.cache.session.SessionCache(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(7), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(9), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(10), 0L).asInstanceOf[Long]
    )
  }

  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SessionProto.descriptor.getMessageTypes.get(0)

  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)

  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)

  lazy val defaultInstance = com.jxjxgo.sso.domain.cache.session.SessionCache(
  )

  implicit class SessionCacheLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.jxjxgo.sso.domain.cache.session.SessionCache]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.jxjxgo.sso.domain.cache.session.SessionCache](_l) {
    def token: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))

    def clientId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))

    def version: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.version)((c_, f_) => c_.copy(version = f_))

    def ip: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.ip)((c_, f_) => c_.copy(ip = f_))

    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))

    def fingerPrint: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.fingerPrint)((c_, f_) => c_.copy(fingerPrint = f_))

    def status: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.status)((c_, f_) => c_.copy(status = f_))

    def memberId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.memberId)((c_, f_) => c_.copy(memberId = f_))

    def identity: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.identity)((c_, f_) => c_.copy(identity = f_))

    def identityTicket: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.identityTicket)((c_, f_) => c_.copy(identityTicket = f_))

    def gmtCreate: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.gmtCreate)((c_, f_) => c_.copy(gmtCreate = f_))
  }

  final val TOKEN_FIELD_NUMBER = 1
  final val CLIENTID_FIELD_NUMBER = 2
  final val VERSION_FIELD_NUMBER = 3
  final val IP_FIELD_NUMBER = 4
  final val DEVICETYPE_FIELD_NUMBER = 5
  final val FINGERPRINT_FIELD_NUMBER = 6
  final val STATUS_FIELD_NUMBER = 7
  final val MEMBERID_FIELD_NUMBER = 8
  final val IDENTITY_FIELD_NUMBER = 9
  final val IDENTITYTICKET_FIELD_NUMBER = 10
  final val GMTCREATE_FIELD_NUMBER = 11
}
